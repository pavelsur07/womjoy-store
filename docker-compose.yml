version: "3.9"
services:
  traefik:
    image: traefik:2.4
    command:
      --providers.docker=true
      --providers.docker.exposedByDefault=false
      --entryPoints.http.address=:80
    ports:
      - "80:80"
      - "8080:8080"
    networks:
      traefik-public:
        aliases:
          - imgproxy.localhost
          - storage.localhost
      default:
        aliases:
          - imgproxy.localhost
          - storage.localhost

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public

  site:
    build:
      context: site/docker
      dockerfile: development/nginx/Dockerfile
    volumes:
      - ./site:/app
    networks:
      - traefik-public
      - default
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.site.rule=Host(`localhost`)
      - traefik.http.routers.site.entryPoints=http
      - traefik.http.services.site.loadBalancer.server.port=80

  site-php-fpm:
    build:
      context: site/docker
      dockerfile: development/php-fpm/Dockerfile
    environment:
      APP_ENV: dev
      APP_DEBUG: 1
      APP_SECRET: 777
      SENTRY_DSN: ""
      API_URL: 'http://localhost/'
    volumes:
      - ./site:/app
  site-php-cli:
    build:
      context: site/docker
      dockerfile: development/php-cli/Dockerfile
    environment:
      APP_ENV: dev
      APP_DEBUG: 1
      APP_SECRET: 777
      SENTRY_DSN: ""
      # TODO: Remove after installing CS Fixer for PHP 8.2
      API_URL: 'http://localhost/'
    volumes:
      - ./site:/app
  site-php-async:
    build:
      context: site/docker
      dockerfile: development/php-cli/Dockerfile
    restart: always
    environment:
      APP_ENV: dev
      APP_DEBUG: 1
      APP_SECRET: 777
      SENTRY_DSN: ""
      # TODO: Remove after installing CS Fixer for PHP 8.2
      PHP_CS_FIXER_IGNORE_ENV: 1
    volumes:
      - ./site:/app
    command: sh -c "until [ -f .ready ] ; do sleep 1 ; done && php bin/console messenger:consume async -vv"
      
  site-node-watch:
    build:
      context: site/docker
      dockerfile: development/node/Dockerfile
    volumes:
      - ./site:/app
    working_dir: /app
    command: sh -c "until [ -f .ready ] ; do sleep 1 ; done && yarn run watch"
    tty: true

  site-node-cli:
    build:
      context: site/docker
      dockerfile: development/node/Dockerfile
    volumes:
      - ./site:/app
    working_dir: /app
  
  site-postgres:
    image: postgres:15.1-alpine
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD_FILE: /run/secrets/site_db_password
      POSTGRES_DB: app
    secrets:
      - site_db_password
    volumes:
      - site-postgres:/var/lib/postgresql/data
    ports:
      - "54321:5432"
  site-redis:
    image: redis:7.0-alpine
    volumes:
      - site-redis:/data
    command:
      - 'redis-server'
      - '--databases 2'
      - '--save 900 1'
      - '--save 300 10'
      - '--save 60 10000'
      - '--requirepass secret'
  
  mailer:
    image: mailhog/mailhog
    networks:
      - traefik-public
      - default
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.mailer.rule=Host(`mailer.localhost`)
      - traefik.http.routers.mailer.entryPoints=http
      - traefik.http.services.mailer.loadBalancer.server.port=8025
  
  imgproxy:
    image: darthsim/imgproxy:latest
    environment:
      IMGPROXY_KEY: 'hex-encoded-key'
      IMGPROXY_SALT: 'hex-encoded-salt'
    networks:
      - traefik-public
      - default
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.imgproxy.rule=Host(`imgproxy.localhost`)
      - traefik.http.routers.imgproxy.entryPoints=http
      - traefik.http.services.imgproxy.loadBalancer.server.port=8080
  
  storage-nginx:
    build:
      context: ./storage/docker/development
      dockerfile: Dockerfile
    volumes:
      - site-storage:/usr/share/nginx/html/data
    networks:
      - traefik-public
      - default
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.storage.rule=Host(`storage.localhost`)
      - traefik.http.routers.storage.entryPoints=http
      - traefik.http.services.storage.loadBalancer.server.port=80
      
  minio-s3:
    image: minio/minio
    environment:
      MINIO_ROOT_USER: storage_app
      MINIO_ROOT_PASSWORD: secret_key
    ports:
      - "9000:9000"
      - "9090:9090"
    volumes:
      - site-storage:/data
    entrypoint: sh -c 'docker-entrypoint.sh minio server /data --console-address ":80"'
    networks:
      - traefik-public
      - default
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.minio-s3.rule=Host(`minio-s3.localhost`)
      - traefik.http.routers.minio-s3.entryPoints=http
      - traefik.http.services.minio-s3.loadBalancer.server.port=80
  
  minio-s3-create-buckets:
    image: minio/mc
    depends_on:
      - minio-s3
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio-s3:9000 storage_app secret_key;
      /usr/bin/mc mb myminio/static;
      /usr/bin/mc anonymous set public myminio/static;
      exit 0;
      "
    networks:
      - traefik-public
      - default

  adminer:
    image: adminer
    restart: always
    networks:
      - traefik-public
      - default
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.http.routers.adminer.rule=Host(`adminer.localhost`)
      - traefik.http.routers.adminer.entrypoints=http
      - traefik.http.services.adminer.loadBalancer.server.port=8080
    depends_on:
      - site-postgres
secrets:
  site_db_password:
    file: ./docker/development/secrets/site_db_password
volumes:
  site-postgres:
  site-redis:
  site-storage:
  composer:
  

networks:
  traefik-public:
    name: traefik-public
    driver: bridge
